Create Table AGENT(
	ID INT NOT NULL AUTO_INCREMENT,
	IP_ADDRESS VARCHAR(128) NOT NULL,
	PORT SMALLINT UNSIGNED NOT NULL,
	CAPABILITIES VARCHAR(256),
	STATUS INT NULL,
	LAST_CHECKED DATETIME,
	PRIMARY KEY (ID)
);

Create Table USERDATA(
	ID INT NOT NULL AUTO_INCREMENT,
	EMAIL VARCHAR(128) NOT NULL,
	PASSWORD VARCHAR(128) NOT NULL,
	NAME VARCHAR(128) NOT NULL,
	REGISTERED_SINCE DATETIME NOT NULL,
	PRIMARY KEY (ID),
	UNIQUE (NAME)
);

-- Each project has one 'admin user', the one who created the project
Create Table PROJECT(
	ID INT NOT NULL AUTO_INCREMENT,
	NAME VARCHAR(256) NOT NULL,
	CREATED_AT DATETIME NOT NULL,
	CREATE_USER_ID INT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (CREATE_USER_ID) REFERENCES USERDATA(ID)
);

-- In addition the 'admin user' can add other users to this project, modeled by this JOIN table
Create Table USER_PROJECT(
	ID INT NOT NULL AUTO_INCREMENT,
	USER_ID INT NOT NULL,
	PROJECT_ID INT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT(ID),
	FOREIGN KEY (USER_ID) REFERENCES USERDATA(ID)
);

-- Modeled like this, each project contains exactly one pipeline. For now I believe we can make this restriction.
-- Status as described in bitflow-process-agent REST-API - GET /pipeline/:id
Create Table PIPELINE(
	ID INT NOT NULL AUTO_INCREMENT,
	AGENT_ID INT NOT NULL,
	ID_ON_AGENT INT NOT NULL,
	PROJECT_ID INT NOT NULL,
	STATUS VARCHAR(32),
	SCRIPT VARCHAR(256), -- the actual script, defining this pipeline
	LAST_CHANGED DATETIME,
	PRIMARY KEY (ID),
	FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT(ID),
	FOREIGN KEY (AGENT_ID) REFERENCES AGENT(ID)
);

-- This table models the pipeline steps, containing one specified algorithm
Create Table PIPELINE_STEP(
	ID INT NOT NULL AUTO_INCREMENT,
	STEP_NUMBER INT NOT NULL,
	PIPELINE_ID INT NOT NULL,
	ALGORITHM VARCHAR(256) NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (PIPELINE_ID) REFERENCES PIPELINE(ID)
);

-- We model the pipeline by making each pipeline step aware of its successor steps, that's what this table is about
Create Table PIPELINE_STEP_SUCCESSORS(
	ID INT NOT NULL AUTO_INCREMENT,
	SUCCESSOR_TO_STEP_ID INT NOT NULL,
	STEP_ID INT NOT NULL,
	PRIMARY KEY (ID),
	FOREIGN KEY (SUCCESSOR_TO_STEP_ID) REFERENCES PIPELINE_STEP(ID),
	FOREIGN KEY (STEP_ID) REFERENCES PIPELINE_STEP(ID)
);