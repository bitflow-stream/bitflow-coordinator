/*
 * bitflow-process-agent: REST-API
 * Process-Agent-REST-API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sven.carlin@campus.tu-berlin.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.cit.backend.agent.api;

import de.cit.backend.agent.ApiException;
import de.cit.backend.agent.api.model.PipelineResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PipelineApi
 */
@Ignore
public class PipelineApiTest {

    private final PipelineApi api = new PipelineApi();

    
    /**
     * 
     *
     * Try to kill the given pipeline.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pipelineIdDeleteTest() throws ApiException {
        Integer id = null;
        PipelineResponse response = api.pipelineIdDelete(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a JSON formatted view of the given pipeline. The Errors property can contain hints about how the current Status of the pipeline was reached, but usually the GET /pipeline/:id/out function provides more useful insights.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pipelineIdGetTest() throws ApiException {
        Integer id = null;
        PipelineResponse response = api.pipelineIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return the combined standard output and standard error of the given pipeline.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pipelineIdOutGetTest() throws ApiException {
        Integer id = null;
        String response = api.pipelineIdOutGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a list of IDs of all currently running pipelines.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pipelinePostTest() throws ApiException {
        String script = null;
        String delay = null;
        String params = null;
        PipelineResponse response = api.pipelinePost(script, delay, params);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a list of IDs of all pipelines in all states, including failed, finished and killed pipelines
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pipelinesGetTest() throws ApiException {
        List<Integer> response = api.pipelinesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a list of IDs of all currently running pipelines.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runningGetTest() throws ApiException {
        List<Integer> response = api.runningGet();

        // TODO: test validations
    }
    
}
